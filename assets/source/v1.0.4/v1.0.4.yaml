esphome:
  name: sensy-one
  friendly_name: Sensy One 
  name_add_mac_suffix: True
  project: 
    name: Sensy-One.S1 mmWave Sensor
    version: v1.0.4

  includes:
    - v1.0.4.h
  on_boot:
    priority: -100
    then:
      - lambda: 'static_cast<LD2450*>(id(ld2450))->read_firmware();'
      - delay: 500ms
      - lambda: 'static_cast<LD2450*>(id(ld2450))->read_mac_address();'
      - delay: 500ms
      - lambda: 'static_cast<LD2450*>(id(ld2450))->set_multi_target_tracking();'

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: 2.0.9

wifi:
  ap:
    ssid: "I am Sensy!"
    ap_timeout: 1min

captive_portal: 

esp32_improv:
  authorizer: none
  identify_duration: 10s
  wifi_timeout: 1min
  on_provisioned:
    then:
      - lambda: 'static_cast<LD2450*>(id(ld2450))->read_firmware();'
      - delay: 500ms
      - lambda: 'static_cast<LD2450*>(id(ld2450))->read_mac_address();'
      - delay: 500ms
      - lambda: 'static_cast<LD2450*>(id(ld2450))->set_multi_target_tracking();'

api:

logger:
  level: DEBUG
  logs:
    default: ERROR
    sensor: ERROR
    text_sensor: ERROR
    template: ERROR
    uart: ERROR
    wifi: ERROR
    mdns: ERROR
    esphome.core: ERROR
    esp32_ble: ERROR
    esp32_ble_server: ERROR
    esp32_improv: ERROR
    captive_portal: ERROR
    web_server: ERROR
    api: ERROR
    ota: ERROR
    number: ERROR
    ld2450: DEBUG

web_server:
  port: 80
  log: false

ota:
  platform: esphome

uart:
  id: uart_ld2450
  tx_pin: GPIO15  #RX-LD2450
  rx_pin: GPIO14  #TX-LD2450
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

custom_component:
  - lambda: |-
      auto ld = new LD2450(id(uart_ld2450));
      return std::vector<esphome::Component*>{ ld };
    components:
      - id: ld2450

sensor:
  - platform: custom
    lambda: |-
      return static_cast<LD2450*>(id(ld2450))->get_target_sensors();
    sensors:
      - name: "Target 1 X Coordinate"
        id: target1_x
        unit_of_measurement: "cm"
        accuracy_decimals: 2
        icon: mdi:alpha-x-box-outline
      - name: "Target 1 Y Coordinate"
        id: target1_y
        unit_of_measurement: "cm"
        accuracy_decimals: 2
        icon: mdi:alpha-y-box-outline
      - name: "Target 1 Angle"
        id: target1_angle
        unit_of_measurement: "°"
        accuracy_decimals: 2
        icon: mdi:format-text-rotation-angle-up
      - name: "Target 1 Speed"
        id: target1_speed
        unit_of_measurement: "cm/s"
        icon: mdi:speedometer
      - name: "Target 1 Distance Resolution"
        id: target1_distance_resolution
        unit_of_measurement: "cm"
        icon: mdi:diameter-outline
      - name: "Target 1 Distance"
        id: target1_distance
        unit_of_measurement: "cm"
        accuracy_decimals: 2
        icon: mdi:map-marker-distance
      - name: "Target 2 X Coordinate"
        id: target2_x
        unit_of_measurement: "cm"
        accuracy_decimals: 2
        icon: mdi:alpha-x-box-outline
      - name: "Target 2 Y Coordinate"
        id: target2_y
        unit_of_measurement: "cm"
        accuracy_decimals: 2
        icon: mdi:alpha-y-box-outline
      - name: "Target 2 Angle"
        id: target2_angle
        unit_of_measurement: "°"
        accuracy_decimals: 2
        icon: mdi:format-text-rotation-angle-up
      - name: "Target 2 Speed"
        id: target2_speed
        unit_of_measurement: "cm/s"
        icon: mdi:speedometer
      - name: "Target 2 Distance Resolution"
        id: target2_distance_resolution
        unit_of_measurement: "cm"
        icon: mdi:diameter-outline
      - name: "Target 2 Distance"
        id: target2_distance
        unit_of_measurement: "cm"
        accuracy_decimals: 2
        icon: mdi:map-marker-distance
      - name: "Target 3 X Coordinate"
        id: target3_x
        unit_of_measurement: "cm"
        accuracy_decimals: 2
        icon: mdi:alpha-x-box-outline
      - name: "Target 3 Y Coordinate"
        id: target3_y
        unit_of_measurement: "cm"
        accuracy_decimals: 2
        icon: mdi:alpha-y-box-outline
      - name: "Target 3 Angle"
        id: target3_angle
        unit_of_measurement: "°"
        accuracy_decimals: 2
        icon: mdi:format-text-rotation-angle-up
      - name: "Target 3 Speed"
        id: target3_speed
        unit_of_measurement: "cm/s"
        icon: mdi:speedometer
      - name: "Target 3 Distance Resolution"
        id: target3_distance_resolution
        unit_of_measurement: "cm"
        icon: mdi:diameter-outline
      - name: "Target 3 Distance"
        id: target3_distance
        unit_of_measurement: "cm"
        accuracy_decimals: 2
        icon: mdi:map-marker-distance

  - platform: internal_temperature
    name: "ESP32 | Temperature"
    entity_category: diagnostic
    icon: mdi:thermometer
    update_interval: 15s

  - platform: uptime
    name: "ESP32 | Uptime (Seconden)"
    id: esp32_uptime_seconds
    entity_category: diagnostic
    icon: mdi:sort-clock-descending
    update_interval: 15s
    internal: true  

button:

  - platform: factory_reset
    name: "ESP32 | Factory Reset"
    entity_category: config
    icon: mdi:factory

  - platform: restart
    name: "ESP32 | Restart Module"
    entity_category: config
    icon: mdi:restart

  - platform: template
    name: "RADAR | Single Target"
    on_press:
      - lambda: 'static_cast<LD2450*>(id(ld2450))->set_single_target_tracking();'
    entity_category: config
    icon: mdi:account

  - platform: template
    name: "RADAR | Multi Target"
    on_press:
      - lambda: 'static_cast<LD2450*>(id(ld2450))->set_multi_target_tracking();'
    entity_category: config
    icon: mdi:account-group

  - platform: template
    name: "RADAR | Bluetooth On"
    on_press:
      - lambda: 'static_cast<LD2450*>(id(ld2450))->turn_bluetooth_on();'
      - lambda: 'static_cast<LD2450*>(id(ld2450))->restart_module();'
    entity_category: config
    icon: mdi:bluetooth

  - platform: template
    name: "RADAR | Bluetooth Off"
    on_press:
      - lambda: 'static_cast<LD2450*>(id(ld2450))->turn_bluetooth_off();'
      - lambda: 'static_cast<LD2450*>(id(ld2450))->restart_module();'
    entity_category: config
    icon: mdi:bluetooth-off

  - platform: template
    name: "RADAR | Restart Module"
    on_press:
      - lambda: 'static_cast<LD2450*>(id(ld2450))->restart_module();'
    entity_category: config
    icon: mdi:restart

  - platform: template
    name: "RADAR | Factory Reset"
    on_press:
      - lambda: 'static_cast<LD2450*>(id(ld2450))->restore_factory_settings();'
      - lambda: 'static_cast<LD2450*>(id(ld2450))->restart_module();'
    entity_category: config
    icon: mdi:factory
    
number:
  - platform: template
    id: any_presence_delay
    name: "Any Presence Delay"
    min_value: 0
    max_value: 3600
    initial_value: 30
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:timer-outline"
    unit_of_measurement: "s"

  - platform: template
    id: any_movement_threshold
    name: "Any Movement Threshold"
    min_value: 0
    max_value: 1000
    initial_value: 10
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:motion-sensor"
    unit_of_measurement: "cm/s"

  - platform: template
    id: zone1_x_begin
    name: "Zone 1 X Begin"
    min_value: -600
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-left"
    unit_of_measurement: "cm"

  - platform: template
    id: zone1_x_end
    name: "Zone 1 X End"
    min_value: -600
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-right"
    unit_of_measurement: "cm"

  - platform: template
    id: zone1_y_begin
    name: "Zone 1 Y Begin"
    min_value: 0
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-up"
    unit_of_measurement: "cm"

  - platform: template
    id: zone1_y_end
    name: "Zone 1 Y End"
    min_value: 0
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-down"
    unit_of_measurement: "cm"

  - platform: template
    id: zone1_presence_delay
    name: "Zone 1 Presence Delay"
    min_value: 0
    max_value: 3600
    initial_value: 30
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:timer-outline"
    unit_of_measurement: "s"

  - platform: template
    id: zone1_movement_threshold
    name: "Zone 1 Movement Threshold"
    min_value: 0
    max_value: 1000
    initial_value: 10
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:motion-sensor"
    unit_of_measurement: "cm/s"

  - platform: template
    id: zone2_x_begin
    name: "Zone 2 X Begin"
    min_value: -600
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-left"
    unit_of_measurement: "cm"

  - platform: template
    id: zone2_x_end
    name: "Zone 2 X End"
    min_value: -600
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-right"
    unit_of_measurement: "cm"

  - platform: template
    id: zone2_y_begin
    name: "Zone 2 Y Begin"
    min_value: 0
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-up"
    unit_of_measurement: "cm"

  - platform: template
    id: zone2_y_end
    name: "Zone 2 Y End"
    min_value: 0
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-down"
    unit_of_measurement: "cm"

  - platform: template
    id: zone2_presence_delay
    name: "Zone 2 Presence Delay"
    min_value: 0
    max_value: 3600
    initial_value: 30
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:timer-outline"
    unit_of_measurement: "s"

  - platform: template
    id: zone2_movement_threshold
    name: "Zone 2 Movement Threshold"
    min_value: 0
    max_value: 1000
    initial_value: 10
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:motion-sensor"
    unit_of_measurement: "cm/s"

  - platform: template
    id: zone3_x_begin
    name: "Zone 3 X Begin"
    min_value: -600
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-left"
    unit_of_measurement: "cm"

  - platform: template
    id: zone3_x_end
    name: "Zone 3 X End"
    min_value: -600
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-right"
    unit_of_measurement: "cm"

  - platform: template
    id: zone3_y_begin
    name: "Zone 3 Y Begin"
    min_value: 0
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-up"
    unit_of_measurement: "cm"

  - platform: template
    id: zone3_y_end
    name: "Zone 3 Y End"
    min_value: 0
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-down"
    unit_of_measurement: "cm"

  - platform: template
    id: zone3_presence_delay
    name: "Zone 3 Presence Delay"
    min_value: 0
    max_value: 3600
    initial_value: 30
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:timer-outline"
    unit_of_measurement: "s"

  - platform: template
    id: zone3_movement_threshold
    name: "Zone 3 Movement Threshold"
    min_value: 0
    max_value: 1000
    initial_value: 10
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:motion-sensor"
    unit_of_measurement: "cm/s"

  - platform: template
    id: exclusion_x_begin
    name: "Exclusion X Begin"
    min_value: -600
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-left"
    unit_of_measurement: "cm"

  - platform: template
    id: exclusion_x_end
    name: "Exclusion X End"
    min_value: -600
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-right"
    unit_of_measurement: "cm"

  - platform: template
    id: exclusion_y_begin
    name: "Exclusion Y Begin"
    min_value: 0
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-up"
    unit_of_measurement: "cm"

  - platform: template
    id: exclusion_y_end
    name: "Exclusion Y End"
    min_value: 0
    max_value: 600
    initial_value: 0
    step: 1
    optimistic: true
    restore_value: true
    icon: "mdi:arrow-collapse-down"
    unit_of_measurement: "cm"
    
  - platform: template
    id: detection_threshold
    name: "Detection Range"
    min_value: 0
    max_value: 600
    initial_value: 600
    step: 1
    optimistic: true
    restore_value: true
    unit_of_measurement: "cm"
    icon: mdi:signal-distance-variant
    on_value:
      then:
        - lambda: 'static_cast<LD2450*>(id(ld2450))->set_detection_range_threshold(id(detection_threshold).state);'

text_sensor:
  - platform: custom
    lambda: |-
      return static_cast<LD2450*>(id(ld2450))->get_text_sensors();
    text_sensors:
      - name: "RADAR | Firmware"
        entity_category: diagnostic
        icon: mdi:git
    
      - name: "RADAR | MAC"
        entity_category: diagnostic
        icon: mdi:card-bulleted-settings

      - name: "RADAR | Tracking Mode"
        entity_category: diagnostic
        icon: mdi:radar

  - platform: template
    name: "SENSY | Firmware"
    entity_category: diagnostic
    icon: mdi:git
    lambda: |-
      return std::string("v1.0.4");

  - platform: template
    name: "ESP32 | MAC"
    entity_category: diagnostic
    icon: mdi:card-bulleted-settings
    lambda: |-
      uint64_t mac = ESP.getEfuseMac();
      char mac_str[18];
      snprintf(mac_str, sizeof(mac_str), "%02X:%02X:%02X:%02X:%02X:%02X",
        (uint8_t)(mac >> 40),
        (uint8_t)(mac >> 32),
        (uint8_t)(mac >> 24),
        (uint8_t)(mac >> 16),
        (uint8_t)(mac >> 8),
        (uint8_t)(mac)
      );
      return std::string(mac_str);

  - platform: template
    name: "ESP32 | WiFi Strength"
    entity_category: diagnostic
    icon: mdi:signal-cellular-3
    update_interval: 15s
    lambda: |-
      int rssi = WiFi.RSSI(); 
      if (rssi < -90) {
        return std::string("Very Weak");
      } else if (rssi < -80) {
        return std::string("Weak");
      } else if (rssi < -70) {
        return std::string("Moderate");
      } else if (rssi < -60) {
        return std::string("Strong");
      } else {
        return std::string("Very Strong");
      }

  - platform: wifi_info
    ip_address:
      name: "ESP32 | IP"
      entity_category: diagnostic
      icon: mdi:ip-network
      update_interval: 15s

  - platform: wifi_info
    ssid:
      name: "ESP32 | SSID"
      entity_category: diagnostic
      icon: mdi:wifi-settings
      update_interval: 15s  

  - platform: template
    name: "ESP32 | Uptime"
    lambda: |-
      int uptime = id(esp32_uptime_seconds).state;
      int hours = uptime / 3600;
      int minutes = (uptime % 3600) / 60;
      int seconds = uptime % 60;
      char buffer[10];
      snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
      return std::string(buffer);
    icon: mdi:sort-clock-descending
    entity_category: diagnostic
    update_interval: 15s

  - platform: template
    name: "All Targets Count"
    icon: mdi:counter
    update_interval: 500ms
    lambda: |-
      int count = 0;
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
              (y >= ex_y_min) && (y <= ex_y_max);
      };
      if ( valid_target(id(target1_x).state, id(target1_y).state) &&
          !in_exclusion(id(target1_x).state, id(target1_y).state) )
        count++;
      if ( valid_target(id(target2_x).state, id(target2_y).state) &&
          !in_exclusion(id(target2_x).state, id(target2_y).state) )
        count++;
      if ( valid_target(id(target3_x).state, id(target3_y).state) &&
          !in_exclusion(id(target3_x).state, id(target3_y).state) )
        count++;
      return std::to_string(count);

  - platform: template
    name: "Any Presence"
    icon: mdi:home-account
    update_interval: 500ms
    lambda: |-
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
              (y >= ex_y_min) && (y <= ex_y_max);
      };
      bool detected = false;
      if ( valid_target(id(target1_x).state, id(target1_y).state) &&
          !in_exclusion(id(target1_x).state, id(target1_y).state) )
        detected = true;
      if ( valid_target(id(target2_x).state, id(target2_y).state) &&
          !in_exclusion(id(target2_x).state, id(target2_y).state) )
        detected = true;
      if ( valid_target(id(target3_x).state, id(target3_y).state) &&
          !in_exclusion(id(target3_x).state, id(target3_y).state) )
        detected = true;
      static unsigned long no_presence_start = 0;
      if (detected) {
        no_presence_start = millis();
        return std::string("Detected");
      } else {
        int delay_sec = (int) id(any_presence_delay).state;
        if (no_presence_start == 0 || (millis() - no_presence_start) < (unsigned long)(delay_sec * 1000))
          return std::string("Detected");
        else
          return std::string("Clear");
      }

  - platform: template
    name: "Any Movement"
    icon: mdi:motion-sensor
    update_interval: 500ms
    lambda: |-
      float threshold = id(any_movement_threshold).state;
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
              (y >= ex_y_min) && (y <= ex_y_max);
      };
      bool movement_detected = false;
      if ( valid_target(id(target1_x).state, id(target1_y).state) &&
          !in_exclusion(id(target1_x).state, id(target1_y).state) &&
          (fabs(id(target1_speed).state) > threshold) )
        movement_detected = true;
      if ( valid_target(id(target2_x).state, id(target2_y).state) &&
          !in_exclusion(id(target2_x).state, id(target2_y).state) &&
          (fabs(id(target2_speed).state) > threshold) )
        movement_detected = true;
      if ( valid_target(id(target3_x).state, id(target3_y).state) &&
          !in_exclusion(id(target3_x).state, id(target3_y).state) &&
          (fabs(id(target3_speed).state) > threshold) )
        movement_detected = true;
      return movement_detected ? std::string("Detected") : std::string("Clear");


  - platform: template
    name: "Zone 1 Targets Count"
    update_interval: 500ms
    icon: mdi:counter
    lambda: |-
      float x_begin = id(zone1_x_begin).state;
      float x_end   = id(zone1_x_end).state;
      float y_begin = id(zone1_y_begin).state;
      float y_end   = id(zone1_y_end).state;
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_zone = [=](float x, float y) -> bool {
        float x_min = std::min(x_begin, x_end);
        float x_max = std::max(x_begin, x_end);
        float y_min = std::min(y_begin, y_end);
        float y_max = std::max(y_begin, y_end);
        return (x >= x_min) && (x <= x_max) &&
               (y >= y_min) && (y <= y_max);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
               (y >= ex_y_min) && (y <= ex_y_max);
      };
      int count = 0;
      if ( valid_target(id(target1_x).state, id(target1_y).state) &&
           in_zone(id(target1_x).state, id(target1_y).state) &&
           !in_exclusion(id(target1_x).state, id(target1_y).state) )
        count++;
      if ( valid_target(id(target2_x).state, id(target2_y).state) &&
           in_zone(id(target2_x).state, id(target2_y).state) &&
           !in_exclusion(id(target2_x).state, id(target2_y).state) )
        count++;
      if ( valid_target(id(target3_x).state, id(target3_y).state) &&
           in_zone(id(target3_x).state, id(target3_y).state) &&
           !in_exclusion(id(target3_x).state, id(target3_y).state) )
        count++;
      return std::to_string(count);

  - platform: template
    name: "Zone 1 Presence"
    update_interval: 500ms
    icon: mdi:account-box-outline
    lambda: |-
      float x_begin = id(zone1_x_begin).state;
      float x_end   = id(zone1_x_end).state;
      float y_begin = id(zone1_y_begin).state;
      float y_end   = id(zone1_y_end).state;
      int delay_sec = (int) id(zone1_presence_delay).state;
      float x_min = std::min(x_begin, x_end);
      float x_max = std::max(x_begin, x_end);
      float y_min = std::min(y_begin, y_end);
      float y_max = std::max(y_begin, y_end);
      if (fabs(x_max - x_min) < 0.001 || fabs(y_max - y_min) < 0.001)
        return std::string("Clear");
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_zone = [=](float x, float y) -> bool {
        return (x >= x_min) && (x <= x_max) &&
               (y >= y_min) && (y <= y_max);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
               (y >= ex_y_min) && (y <= ex_y_max);
      };
      bool detected = false;
      if ( valid_target(id(target1_x).state, id(target1_y).state) &&
           in_zone(id(target1_x).state, id(target1_y).state) &&
           !in_exclusion(id(target1_x).state, id(target1_y).state) )
        detected = true;
      if ( valid_target(id(target2_x).state, id(target2_y).state) &&
           in_zone(id(target2_x).state, id(target2_y).state) &&
           !in_exclusion(id(target2_x).state, id(target2_y).state) )
        detected = true;
      if ( valid_target(id(target3_x).state, id(target3_y).state) &&
           in_zone(id(target3_x).state, id(target3_y).state) &&
           !in_exclusion(id(target3_x).state, id(target3_y).state) )
        detected = true;
      static unsigned long zone1_no_presence_start = 0;
      if (detected) {
        zone1_no_presence_start = millis();
        return std::string("Detected");
      } else {
        if (zone1_no_presence_start == 0 || (millis() - zone1_no_presence_start) < (unsigned long)(delay_sec * 1000))
          return std::string("Detected");
        else
          return std::string("Clear");
      }

  - platform: template
    name: "Zone 1 Movement"
    update_interval: 500ms
    icon: mdi:motion-sensor
    lambda: |-
      float x_begin = id(zone1_x_begin).state;
      float x_end   = id(zone1_x_end).state;
      float y_begin = id(zone1_y_begin).state;
      float y_end   = id(zone1_y_end).state;
      float threshold = id(zone1_movement_threshold).state;
      float x_min = std::min(x_begin, x_end);
      float x_max = std::max(x_begin, x_end);
      float y_min = std::min(y_begin, y_end);
      float y_max = std::max(y_begin, y_end);
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_zone = [=](float x, float y) -> bool {
        return (x >= x_min) && (x <= x_max) &&
               (y >= y_min) && (y <= y_max);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
               (y >= ex_y_min) && (y <= ex_y_max);
      };
      if (( valid_target(id(target1_x).state, id(target1_y).state) &&
            in_zone(id(target1_x).state, id(target1_y).state) &&
            !in_exclusion(id(target1_x).state, id(target1_y).state) &&
            (fabs(id(target1_speed).state) > threshold)) ||
          ( valid_target(id(target2_x).state, id(target2_y).state) &&
            in_zone(id(target2_x).state, id(target2_y).state) &&
            !in_exclusion(id(target2_x).state, id(target2_y).state) &&
            (fabs(id(target2_speed).state) > threshold)) ||
          ( valid_target(id(target3_x).state, id(target3_y).state) &&
            in_zone(id(target3_x).state, id(target3_y).state) &&
            !in_exclusion(id(target3_x).state, id(target3_y).state) &&
            (fabs(id(target3_speed).state) > threshold)) )
        return std::string("Detected");
      else
        return std::string("Clear");

  - platform: template
    name: "Zone 2 Targets Count"
    update_interval: 500ms
    icon: mdi:counter
    lambda: |-
      float x_begin = id(zone2_x_begin).state;
      float x_end   = id(zone2_x_end).state;
      float y_begin = id(zone2_y_begin).state;
      float y_end   = id(zone2_y_end).state;
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_zone = [=](float x, float y) -> bool {
        float x_min = std::min(x_begin, x_end);
        float x_max = std::max(x_begin, x_end);
        float y_min = std::min(y_begin, y_end);
        float y_max = std::max(y_begin, y_end);
        return (x >= x_min) && (x <= x_max) &&
               (y >= y_min) && (y <= y_max);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
               (y >= ex_y_min) && (y <= ex_y_max);
      };
      int count = 0;
      if ( valid_target(id(target1_x).state, id(target1_y).state) &&
           in_zone(id(target1_x).state, id(target1_y).state) &&
           !in_exclusion(id(target1_x).state, id(target1_y).state) )
        count++;
      if ( valid_target(id(target2_x).state, id(target2_y).state) &&
           in_zone(id(target2_x).state, id(target2_y).state) &&
           !in_exclusion(id(target2_x).state, id(target2_y).state) )
        count++;
      if ( valid_target(id(target3_x).state, id(target3_y).state) &&
           in_zone(id(target3_x).state, id(target3_y).state) &&
           !in_exclusion(id(target3_x).state, id(target3_y).state) )
        count++;
      return std::to_string(count);

  - platform: template
    name: "Zone 2 Presence"
    update_interval: 500ms
    icon: mdi:account-box-outline
    lambda: |-
      float x_begin = id(zone2_x_begin).state;
      float x_end   = id(zone2_x_end).state;
      float y_begin = id(zone2_y_begin).state;
      float y_end   = id(zone2_y_end).state;
      int delay_sec = (int) id(zone2_presence_delay).state;
      float x_min = std::min(x_begin, x_end);
      float x_max = std::max(x_begin, x_end);
      float y_min = std::min(y_begin, y_end);
      float y_max = std::max(y_begin, y_end);
      if (fabs(x_max - x_min) < 0.001 || fabs(y_max - y_min) < 0.001)
        return std::string("Clear");
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_zone = [=](float x, float y) -> bool {
        return (x >= x_min) && (x <= x_max) &&
               (y >= y_min) && (y <= y_max);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
               (y >= ex_y_min) && (y <= ex_y_max);
      };
      bool detected = false;
      if ( valid_target(id(target1_x).state, id(target1_y).state) &&
           in_zone(id(target1_x).state, id(target1_y).state) &&
           !in_exclusion(id(target1_x).state, id(target1_y).state) )
        detected = true;
      if ( valid_target(id(target2_x).state, id(target2_y).state) &&
           in_zone(id(target2_x).state, id(target2_y).state) &&
           !in_exclusion(id(target2_x).state, id(target2_y).state) )
        detected = true;
      if ( valid_target(id(target3_x).state, id(target3_y).state) &&
           in_zone(id(target3_x).state, id(target3_y).state) &&
           !in_exclusion(id(target3_x).state, id(target3_y).state) )
        detected = true;
      static unsigned long zone2_no_presence_start = 0;
      if (detected) {
        zone2_no_presence_start = millis();
        return std::string("Detected");
      } else {
        if (zone2_no_presence_start == 0 || (millis() - zone2_no_presence_start) < (unsigned long)(delay_sec * 1000))
          return std::string("Detected");
        else
          return std::string("Clear");
      }

  - platform: template
    name: "Zone 2 Movement"
    update_interval: 500ms
    icon: mdi:motion-sensor
    lambda: |-
      float x_begin = id(zone2_x_begin).state;
      float x_end   = id(zone2_x_end).state;
      float y_begin = id(zone2_y_begin).state;
      float y_end   = id(zone2_y_end).state;
      float threshold = id(zone2_movement_threshold).state;
      float x_min = std::min(x_begin, x_end);
      float x_max = std::max(x_begin, x_end);
      float y_min = std::min(y_begin, y_end);
      float y_max = std::max(y_begin, y_end);
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_zone = [=](float x, float y) -> bool {
        return (x >= x_min) && (x <= x_max) &&
               (y >= y_min) && (y <= y_max);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
               (y >= ex_y_min) && (y <= ex_y_max);
      };
      if (( valid_target(id(target1_x).state, id(target1_y).state) &&
            in_zone(id(target1_x).state, id(target1_y).state) &&
            !in_exclusion(id(target1_x).state, id(target1_y).state) &&
            (fabs(id(target1_speed).state) > threshold)) ||
          ( valid_target(id(target2_x).state, id(target2_y).state) &&
            in_zone(id(target2_x).state, id(target2_y).state) &&
            !in_exclusion(id(target2_x).state, id(target2_y).state) &&
            (fabs(id(target2_speed).state) > threshold)) ||
          ( valid_target(id(target3_x).state, id(target3_y).state) &&
            in_zone(id(target3_x).state, id(target3_y).state) &&
            !in_exclusion(id(target3_x).state, id(target3_y).state) &&
            (fabs(id(target3_speed).state) > threshold)) )
        return std::string("Detected");
      else
        return std::string("Clear");

  - platform: template
    name: "Zone 3 Targets Count"
    update_interval: 500ms
    icon: mdi:counter
    lambda: |-
      float x_begin = id(zone3_x_begin).state;
      float x_end   = id(zone3_x_end).state;
      float y_begin = id(zone3_y_begin).state;
      float y_end   = id(zone3_y_end).state;
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_zone = [=](float x, float y) -> bool {
        float x_min = std::min(x_begin, x_end);
        float x_max = std::max(x_begin, x_end);
        float y_min = std::min(y_begin, y_end);
        float y_max = std::max(y_begin, y_end);
        return (x >= x_min) && (x <= x_max) &&
               (y >= y_min) && (y <= y_max);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
               (y >= ex_y_min) && (y <= ex_y_max);
      };
      int count = 0;
      if ( valid_target(id(target1_x).state, id(target1_y).state) &&
           in_zone(id(target1_x).state, id(target1_y).state) &&
           !in_exclusion(id(target1_x).state, id(target1_y).state) )
        count++;
      if ( valid_target(id(target2_x).state, id(target2_y).state) &&
           in_zone(id(target2_x).state, id(target2_y).state) &&
           !in_exclusion(id(target2_x).state, id(target2_y).state) )
        count++;
      if ( valid_target(id(target3_x).state, id(target3_y).state) &&
           in_zone(id(target3_x).state, id(target3_y).state) &&
           !in_exclusion(id(target3_x).state, id(target3_y).state) )
        count++;
      return std::to_string(count);

  - platform: template
    name: "Zone 3 Presence"
    update_interval: 500ms
    icon: mdi:account-box-outline
    lambda: |-
      float x_begin = id(zone3_x_begin).state;
      float x_end   = id(zone3_x_end).state;
      float y_begin = id(zone3_y_begin).state;
      float y_end   = id(zone3_y_end).state;
      int delay_sec = (int) id(zone3_presence_delay).state;
      float x_min = std::min(x_begin, x_end);
      float x_max = std::max(x_begin, x_end);
      float y_min = std::min(y_begin, y_end);
      float y_max = std::max(y_begin, y_end);
      if (fabs(x_max - x_min) < 0.001 || fabs(y_max - y_min) < 0.001)
        return std::string("Clear");
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_zone = [=](float x, float y) -> bool {
        return (x >= x_min) && (x <= x_max) &&
               (y >= y_min) && (y <= y_max);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
               (y >= ex_y_min) && (y <= ex_y_max);
      };
      bool detected = false;
      if ( valid_target(id(target1_x).state, id(target1_y).state) &&
           in_zone(id(target1_x).state, id(target1_y).state) &&
           !in_exclusion(id(target1_x).state, id(target1_y).state) )
        detected = true;
      if ( valid_target(id(target2_x).state, id(target2_y).state) &&
           in_zone(id(target2_x).state, id(target2_y).state) &&
           !in_exclusion(id(target2_x).state, id(target2_y).state) )
        detected = true;
      if ( valid_target(id(target3_x).state, id(target3_y).state) &&
           in_zone(id(target3_x).state, id(target3_y).state) &&
           !in_exclusion(id(target3_x).state, id(target3_y).state) )
        detected = true;
      static unsigned long zone3_no_presence_start = 0;
      if (detected) {
        zone3_no_presence_start = millis();
        return std::string("Detected");
      } else {
        if (zone3_no_presence_start == 0 || (millis() - zone3_no_presence_start) < (unsigned long)(delay_sec * 1000))
          return std::string("Detected");
        else
          return std::string("Clear");
      }

  - platform: template
    name: "Zone 3 Movement"
    update_interval: 500ms
    icon: mdi:motion-sensor
    lambda: |-
      float x_begin = id(zone3_x_begin).state;
      float x_end   = id(zone3_x_end).state;
      float y_begin = id(zone3_y_begin).state;
      float y_end   = id(zone3_y_end).state;
      float threshold = id(zone3_movement_threshold).state;
      float x_min = std::min(x_begin, x_end);
      float x_max = std::max(x_begin, x_end);
      float y_min = std::min(y_begin, y_end);
      float y_max = std::max(y_begin, y_end);
      auto valid_target = [](float x, float y) -> bool {
        return !(fabs(x) < 0.001 && fabs(y) < 0.001);
      };
      auto in_zone = [=](float x, float y) -> bool {
        return (x >= x_min) && (x <= x_max) &&
               (y >= y_min) && (y <= y_max);
      };
      auto in_exclusion = [=](float x, float y) -> bool {
        float ex_x_begin = id(exclusion_x_begin).state;
        float ex_x_end   = id(exclusion_x_end).state;
        float ex_y_begin = id(exclusion_y_begin).state;
        float ex_y_end   = id(exclusion_y_end).state;
        float ex_x_min = std::min(ex_x_begin, ex_x_end);
        float ex_x_max = std::max(ex_x_begin, ex_x_end);
        float ex_y_min = std::min(ex_y_begin, ex_y_end);
        float ex_y_max = std::max(ex_y_begin, ex_y_end);
        return (x >= ex_x_min) && (x <= ex_x_max) &&
               (y >= ex_y_min) && (y <= ex_y_max);
      };
      if (( valid_target(id(target1_x).state, id(target1_y).state) &&
            in_zone(id(target1_x).state, id(target1_y).state) &&
            !in_exclusion(id(target1_x).state, id(target1_y).state) &&
            (fabs(id(target1_speed).state) > threshold)) ||
          ( valid_target(id(target2_x).state, id(target2_y).state) &&
            in_zone(id(target2_x).state, id(target2_y).state) &&
            !in_exclusion(id(target2_x).state, id(target2_y).state) &&
            (fabs(id(target2_speed).state) > threshold)) ||
          ( valid_target(id(target3_x).state, id(target3_y).state) &&
            in_zone(id(target3_x).state, id(target3_y).state) &&
            !in_exclusion(id(target3_x).state, id(target3_y).state) &&
            (fabs(id(target3_speed).state) > threshold)) )
        return std::string("Detected");
      else
        return std::string("Clear");

  - platform: template
    name: "Target 1 Direction"
    update_interval: 500ms
    icon: mdi:sign-direction
    lambda: |-
      if (fabs(id(target1_x).state) < 0.001 && fabs(id(target1_y).state) < 0.001) {
        return std::string("Clear");
      }
      float speed = id(target1_speed).state;
      float threshold = id(any_movement_threshold).state;
      if (fabs(speed) < threshold) {
        return std::string("Stationary");
      } else if (speed > 0) {
        return std::string("Moving Away");
      } else { 
        return std::string("Approaching");
      }

  - platform: template
    name: "Target 2 Direction"
    update_interval: 500ms
    icon: mdi:sign-direction
    lambda: |-
      if (fabs(id(target2_x).state) < 0.001 && fabs(id(target2_y).state) < 0.001) {
        return std::string("Clear");
      }
      float speed = id(target2_speed).state;
      float threshold = id(any_movement_threshold).state;
      if (fabs(speed) < threshold) {
        return std::string("Stationary");
      } else if (speed > 0) {
        return std::string("Moving Away");
      } else {
        return std::string("Approaching");
      }

  - platform: template
    name: "Target 3 Direction"
    update_interval: 500ms
    icon: mdi:sign-direction
    lambda: |-
      if (fabs(id(target3_x).state) < 0.001 && fabs(id(target3_y).state) < 0.001) {
        return std::string("Clear");
      }
      float speed = id(target3_speed).state;
      float threshold = id(any_movement_threshold).state;
      if (fabs(speed) < threshold) {
        return std::string("Stationary");
      } else if (speed > 0) {
        return std::string("Moving Away");
      } else {
        return std::string("Approaching");
      }