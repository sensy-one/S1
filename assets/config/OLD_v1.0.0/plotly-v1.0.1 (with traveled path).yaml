type: custom:plotly-graph
title: null
refresh_interval: 0.025
layout:
  height: 300
  margin:
    l: 50
    r: 35
    t: 15
    b: 67.5
  showlegend: false
  hovermode: false
  xaxis:
    dtick: 100
    type: number
    fixedrange: true
    showgrid: true
    showticklabels: true
    zeroline: false
    showline: false
    tickangle: -90
    tickfont:
      size: 14
    tickpadding: 10
    range:
      - -605
      - 605
  yaxis:
    dtick: 100
    type: number
    fixedrange: true
    showgrid: true
    showticklabels: true
    zeroline: true
    showline: false
    tickfont:
      size: 14
    tickpadding: 10
    range:
      - 605
      - 0
entities:
  - entity: ""
    name: Coverage
    type: scatter
    mode: lines
    showlegend: false
    line:
      shape: linear
      smoothing: 1
      width: 2
      color: grey
      dash: dot 
    x: |
      $ex (function(){
        let pts = [], sx = 600 * Math.sin(60 * Math.PI/180);
        for (let t = 0; t <= 1; t += 0.1) pts.push(sx * t);
        for (let a = 60; a >= -60; a -= 2) pts.push(600 * Math.sin(a * Math.PI/180));
        let ex = 600 * Math.sin(-60 * Math.PI/180);
        for (let t = 1; t >= 0; t -= 0.1) pts.push(ex * t);
        return pts;
      })()
    "y": |
      $ex (function(){
        let pts = [], sy = 600 * Math.cos(60 * Math.PI/180);
        for (let t = 0; t <= 1; t += 0.1) pts.push(sy * t);
        for (let a = 60; a >= -60; a -= 2) pts.push(600 * Math.cos(a * Math.PI/180));
        let ey = 600 * Math.cos(-60 * Math.PI/180);
        for (let t = 1; t >= 0; t -= 0.1) pts.push(ey * t);
        return pts;
      })()
  - entity: ""
    name: Zone 1 Box
    type: scatter
    mode: lines
    showlegend: false
    line:
      color: rgb(100,100,100)
      width: 2
    x: |
      $ex [
        hass.states["number.replace_me_zone_1_x_begin"].state,
        hass.states["number.replace_me_zone_1_x_end"].state,
        hass.states["number.replace_me_zone_1_x_end"].state,
        hass.states["number.replace_me_zone_1_x_begin"].state,
        hass.states["number.replace_me_zone_1_x_begin"].state
      ]
    "y": |
      $ex [
        hass.states["number.replace_me_zone_1_y_begin"].state,
        hass.states["number.replace_me_zone_1_y_begin"].state,
        hass.states["number.replace_me_zone_1_y_end"].state,
        hass.states["number.replace_me_zone_1_y_end"].state,
        hass.states["number.replace_me_zone_1_y_begin"].state
      ]
  - entity: ""
    name: Zone 2 Box
    type: scatter
    mode: lines
    showlegend: false
    line:
      color: rgb(100,100,100)
      width: 2
    x: |
      $ex [
        hass.states["number.replace_me_zone_2_x_begin"].state,
        hass.states["number.replace_me_zone_2_x_end"].state,
        hass.states["number.replace_me_zone_2_x_end"].state,
        hass.states["number.replace_me_zone_2_x_begin"].state,
        hass.states["number.replace_me_zone_2_x_begin"].state
      ]
    "y": |
      $ex [
        hass.states["number.replace_me_zone_2_y_begin"].state,
        hass.states["number.replace_me_zone_2_y_begin"].state,
        hass.states["number.replace_me_zone_2_y_end"].state,
        hass.states["number.replace_me_zone_2_y_end"].state,
        hass.states["number.replace_me_zone_2_y_begin"].state
      ]
  - entity: ""
    name: Zone 3 Box
    type: scatter
    mode: lines
    showlegend: false
    line:
      color: rgb(100,100,100)
      width: 2
    x: |
      $ex [
        hass.states["number.replace_me_zone_3_x_begin"].state,
        hass.states["number.replace_me_zone_3_x_end"].state,
        hass.states["number.replace_me_zone_3_x_end"].state,
        hass.states["number.replace_me_zone_3_x_begin"].state,
        hass.states["number.replace_me_zone_3_x_begin"].state
      ]
    "y": |
      $ex [
        hass.states["number.replace_me_zone_3_y_begin"].state,
        hass.states["number.replace_me_zone_3_y_begin"].state,
        hass.states["number.replace_me_zone_3_y_end"].state,
        hass.states["number.replace_me_zone_3_y_end"].state,
        hass.states["number.replace_me_zone_3_y_begin"].state
      ]
  - entity: ""
    name: Exclusion Zone
    type: scatter
    mode: lines
    showlegend: false
    line:
      color: rgb(180,0,0)
      width: 2
    x: |
      $ex [
        hass.states["number.replace_me_exclusion_x_begin"].state,
        hass.states["number.replace_me_exclusion_x_end"].state,
        hass.states["number.replace_me_exclusion_x_end"].state,
        hass.states["number.replace_me_exclusion_x_begin"].state,
        hass.states["number.replace_me_exclusion_x_begin"].state
      ]
    "y": |
      $ex [
        hass.states["number.replace_me_exclusion_y_begin"].state,
        hass.states["number.replace_me_exclusion_y_begin"].state,
        hass.states["number.replace_me_exclusion_y_end"].state,
        hass.states["number.replace_me_exclusion_y_end"].state,
        hass.states["number.replace_me_exclusion_y_begin"].state
      ]
  - entity: ""
    name: Zone 1 Label
    type: scatter
    mode: text
    showlegend: false
    text: |
      $ex (
        (parseFloat(hass.states["number.replace_me_zone_1_x_begin"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_zone_1_x_end"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_zone_1_y_begin"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_zone_1_y_end"].state) === 0)
        ? ""
        : "Z1"
      )
    textfont:
      size: 12
      color: rgb(100,100,100)
    textposition: middle center
    x:
      - |-
        $ex (
          (parseFloat(hass.states["number.replace_me_zone_1_x_begin"].state) === 0 &&
           parseFloat(hass.states["number.replace_me_zone_1_x_end"].state) === 0)
          ? null
          : ((parseFloat(hass.states["number.replace_me_zone_1_x_begin"].state) +
              parseFloat(hass.states["number.replace_me_zone_1_x_end"].state)) / 2)
        )
    "y":
      - |-
        $ex (
          (parseFloat(hass.states["number.replace_me_zone_1_y_begin"].state) === 0 &&
           parseFloat(hass.states["number.replace_me_zone_1_y_end"].state) === 0)
          ? null
          : ((parseFloat(hass.states["number.replace_me_zone_1_y_begin"].state) +
              parseFloat(hass.states["number.replace_me_zone_1_y_end"].state)) / 2)
        )
  - entity: ""
    name: Zone 2 Label
    type: scatter
    mode: text
    showlegend: false
    text: |
      $ex (
        (parseFloat(hass.states["number.replace_me_zone_2_x_begin"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_zone_2_x_end"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_zone_2_y_begin"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_zone_2_y_end"].state) === 0)
        ? ""
        : "Z2"
      )
    textfont:
      size: 12
      color: rgb(100,100,100)
    textposition: middle center
    x:
      - |-
        $ex (
          (parseFloat(hass.states["number.replace_me_zone_2_x_begin"].state) === 0 &&
           parseFloat(hass.states["number.replace_me_zone_2_x_end"].state) === 0)
          ? null
          : ((parseFloat(hass.states["number.replace_me_zone_2_x_begin"].state) +
              parseFloat(hass.states["number.replace_me_zone_2_x_end"].state)) / 2)
        )
    "y":
      - |-
        $ex (
          (parseFloat(hass.states["number.replace_me_zone_2_y_begin"].state) === 0 &&
           parseFloat(hass.states["number.replace_me_zone_2_y_end"].state) === 0)
          ? null
          : ((parseFloat(hass.states["number.replace_me_zone_2_y_begin"].state) +
              parseFloat(hass.states["number.replace_me_zone_2_y_end"].state)) / 2)
        )
  - entity: ""
    name: Zone 3 Label
    type: scatter
    mode: text
    showlegend: false
    text: |
      $ex (
        (parseFloat(hass.states["number.replace_me_zone_3_x_begin"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_zone_3_x_end"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_zone_3_y_begin"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_zone_3_y_end"].state) === 0)
        ? ""
        : "Z3"
      )
    textfont:
      size: 12
      color: rgb(100,100,100)
    textposition: middle center
    x:
      - |-
        $ex (
          (parseFloat(hass.states["number.replace_me_zone_3_x_begin"].state) === 0 &&
           parseFloat(hass.states["number.replace_me_zone_3_x_end"].state) === 0)
          ? null
          : ((parseFloat(hass.states["number.replace_me_zone_3_x_begin"].state) +
              parseFloat(hass.states["number.replace_me_zone_3_x_end"].state)) / 2)
        )
    "y":
      - |-
        $ex (
          (parseFloat(hass.states["number.replace_me_zone_3_y_begin"].state) === 0 &&
           parseFloat(hass.states["number.replace_me_zone_3_y_end"].state) === 0)
          ? null
          : ((parseFloat(hass.states["number.replace_me_zone_3_y_begin"].state) +
              parseFloat(hass.states["number.replace_me_zone_3_y_end"].state)) / 2)
        )
  - entity: ""
    name: Exclusion Zone Label
    type: scatter
    mode: text
    showlegend: false
    text: |
      $ex (
        (parseFloat(hass.states["number.replace_me_exclusion_x_begin"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_exclusion_x_end"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_exclusion_y_begin"].state) === 0 &&
         parseFloat(hass.states["number.replace_me_exclusion_y_end"].state) === 0)
        ? ""
        : "E1"
      )
    textfont:
      size: 12
      color: rgb(180,0,0)
    textposition: middle center
    x:
      - |-
        $ex (
          (parseFloat(hass.states["number.replace_me_exclusion_x_begin"].state) === 0 &&
           parseFloat(hass.states["number.replace_me_exclusion_x_end"].state) === 0)
          ? null
          : ((parseFloat(hass.states["number.replace_me_exclusion_x_begin"].state) +
              parseFloat(hass.states["number.replace_me_exclusion_x_end"].state)) / 2)
        )
    "y":
      - |-
        $ex (
          (parseFloat(hass.states["number.replace_me_exclusion_y_begin"].state) === 0 &&
           parseFloat(hass.states["number.replace_me_exclusion_y_end"].state) === 0)
          ? null
          : ((parseFloat(hass.states["number.replace_me_exclusion_y_begin"].state) +
              parseFloat(hass.states["number.replace_me_exclusion_y_end"].state)) / 2)
        )
  - entity: ""
    name: Target 1 Tail
    type: scatter
    mode: lines+markers
    showlegend: false
    line:
      shape: linear
      smoothing: 1
      width: 4
      color: rgba(78,53,206,1)
    marker:
      size: 6
      color: rgba(78,53,206,1)
    x: |
      $ex (function(){
        let x = parseFloat(hass.states["sensor.replace_me_target_1_x_coordinate"].state);
        if(x === 0){
          window.target1TailX = [];
          return window.target1TailX;
        }
        window.target1TailX = window.target1TailX || [];
        window.target1TailX.push(x);
        if(window.target1TailX.length > 50){ window.target1TailX.shift(); }
        function smooth(arr, windowSize) {
          let result = [];
          for (let i = 0; i < arr.length; i++){
            let start = Math.max(0, i - Math.floor(windowSize/2));
            let end = Math.min(arr.length, i + Math.ceil(windowSize/2));
            let sum = 0;
            for(let j = start; j < end; j++){
              sum += arr[j];
            }
            result.push(sum/(end - start));
          }
          return result;
        }
        return smooth(window.target1TailX, 5);
      })()
    "y": |
      $ex (function(){
        let y = parseFloat(hass.states["sensor.replace_me_target_1_y_coordinate"].state);
        if(y === 0){
          window.target1TailY = [];
          return window.target1TailY;
        }
        window.target1TailY = window.target1TailY || [];
        window.target1TailY.push(y);
        if(window.target1TailY.length > 50){ window.target1TailY.shift(); }
        function smooth(arr, windowSize) {
          let result = [];
          for (let i = 0; i < arr.length; i++){
            let start = Math.max(0, i - Math.floor(windowSize/2));
            let end = Math.min(arr.length, i + Math.ceil(windowSize/2));
            let sum = 0;
            for(let j = start; j < end; j++){
              sum += arr[j];
            }
            result.push(sum/(end - start));
          }
          return result;
        }
        return smooth(window.target1TailY, 5);
      })()
  - entity: ""
    name: Target 2 Tail
    type: scatter
    mode: lines+markers
    showlegend: false
    line:
      shape: linear
      smoothing: 1
      width: 4
      color: rgba(78,53,206,1)
    marker:
      size: 6
      color: rgba(78,53,206,1)
    x: |
      $ex (function(){
        let x = parseFloat(hass.states["sensor.replace_me_target_2_x_coordinate"].state);
        if(x === 0){
          window.target2TailX = [];
          return window.target2TailX;
        }
        window.target2TailX = window.target2TailX || [];
        window.target2TailX.push(x);
        if(window.target2TailX.length > 50){ window.target2TailX.shift(); }
        function smooth(arr, windowSize) {
          let result = [];
          for (let i = 0; i < arr.length; i++){
            let start = Math.max(0, i - Math.floor(windowSize/2));
            let end = Math.min(arr.length, i + Math.ceil(windowSize/2));
            let sum = 0;
            for(let j = start; j < end; j++){
              sum += arr[j];
            }
            result.push(sum/(end - start));
          }
          return result;
        }
        return smooth(window.target2TailX, 5);
      })()
    "y": |
      $ex (function(){
        let y = parseFloat(hass.states["sensor.replace_me_target_2_y_coordinate"].state);
        if(y === 0){
          window.target2TailY = [];
          return window.target2TailY;
        }
        window.target2TailY = window.target2TailY || [];
        window.target2TailY.push(y);
        if(window.target2TailY.length > 50){ window.target2TailY.shift(); }
        function smooth(arr, windowSize) {
          let result = [];
          for (let i = 0; i < arr.length; i++){
            let start = Math.max(0, i - Math.floor(windowSize/2));
            let end = Math.min(arr.length, i + Math.ceil(windowSize/2));
            let sum = 0;
            for(let j = start; j < end; j++){
              sum += arr[j];
            }
            result.push(sum/(end - start));
          }
          return result;
        }
        return smooth(window.target2TailY, 5);
      })()
  - entity: ""
    name: Target 3 Tail
    type: scatter
    mode: lines+markers
    showlegend: false
    line:
      shape: linear
      smoothing: 1
      width: 4
      color: rgba(78,53,206,1)
    marker:
      size: 6
      color: rgba(78,53,206,1)
    x: |
      $ex (function(){
        let x = parseFloat(hass.states["sensor.replace_me_target_3_x_coordinate"].state);
        if(x === 0){
          window.target3TailX = [];
          return window.target3TailX;
        }
        window.target3TailX = window.target3TailX || [];
        window.target3TailX.push(x);
        if(window.target3TailX.length > 50){ window.target3TailX.shift(); }
        function smooth(arr, windowSize) {
          let result = [];
          for (let i = 0; i < arr.length; i++){
            let start = Math.max(0, i - Math.floor(windowSize/2));
            let end = Math.min(arr.length, i + Math.ceil(windowSize/2));
            let sum = 0;
            for(let j = start; j < end; j++){
              sum += arr[j];
            }
            result.push(sum/(end - start));
          }
          return result;
        }
        return smooth(window.target3TailX, 5);
      })()
    "y": |
      $ex (function(){
        let y = parseFloat(hass.states["sensor.replace_me_target_3_y_coordinate"].state);
        if(y === 0){
          window.target3TailY = [];
          return window.target3TailY;
        }
        window.target3TailY = window.target3TailY || [];
        window.target3TailY.push(y);
        if(window.target3TailY.length > 50){ window.target3TailY.shift(); }
        function smooth(arr, windowSize) {
          let result = [];
          for (let i = 0; i < arr.length; i++){
            let start = Math.max(0, i - Math.floor(windowSize/2));
            let end = Math.min(arr.length, i + Math.ceil(windowSize/2));
            let sum = 0;
            for(let j = start; j < end; j++){
              sum += arr[j];
            }
            result.push(sum/(end - start));
          }
          return result;
        }
        return smooth(window.target3TailY, 5);
      })()
  - entity: ""
    name: Target 1
    type: scatter
    mode: markers+text
    marker:
      size: 12
      color: "#FFFFFF"
      symbol: circle
    text: >
      $ex ("T1 (" + hass.states["sensor.replace_me_target_1_speed"].state
      + " cm/s)")
    textfont:
      color: "#FFFFFF"
    textposition: top center
    x:
      - |-
        $ex (
          parseFloat(hass.states["sensor.replace_me_target_1_x_coordinate"].state) === 0 &&
          parseFloat(hass.states["sensor.replace_me_target_1_y_coordinate"].state) === 0
          ? null
          : parseFloat(hass.states["sensor.replace_me_target_1_x_coordinate"].state)
        )
    "y":
      - |-
        $ex (
          parseFloat(hass.states["sensor.replace_me_target_1_x_coordinate"].state) === 0 &&
          parseFloat(hass.states["sensor.replace_me_target_1_y_coordinate"].state) === 0
          ? null
          : parseFloat(hass.states["sensor.replace_me_target_1_y_coordinate"].state)
        )
  - entity: ""
    name: Target 2
    type: scatter
    mode: markers+text
    marker:
      size: 12
      color: "#FFFFFF"
      symbol: circle
    text: >
      $ex ("T2 (" + hass.states["sensor.replace_me_target_2_speed"].state
      + " cm/s)")
    textfont:
      color: "#FFFFFF"
    textposition: top center
    x:
      - |-
        $ex (
          parseFloat(hass.states["sensor.replace_me_target_2_x_coordinate"].state) === 0 &&
          parseFloat(hass.states["sensor.replace_me_target_2_y_coordinate"].state) === 0
          ? null
          : parseFloat(hass.states["sensor.replace_me_target_2_x_coordinate"].state)
        )
    "y":
      - |-
        $ex (
          parseFloat(hass.states["sensor.replace_me_target_2_x_coordinate"].state) === 0 &&
          parseFloat(hass.states["sensor.replace_me_target_2_y_coordinate"].state) === 0
          ? null
          : parseFloat(hass.states["sensor.replace_me_target_2_y_coordinate"].state)
        )
  - entity: ""
    name: Target 3
    type: scatter
    mode: markers+text
    marker:
      size: 12
      color: "#FFFFFF"
      symbol: circle
    text: >
      $ex ("T3 (" + hass.states["sensor.replace_me_target_3_speed"].state
      + " cm/s)")
    textfont:
      color: "#FFFFFF"
    textposition: top center
    x:
      - |-
        $ex (
          parseFloat(hass.states["sensor.replace_me_target_3_x_coordinate"].state) === 0 &&
          parseFloat(hass.states["sensor.replace_me_target_3_y_coordinate"].state) === 0
          ? null
          : parseFloat(hass.states["sensor.replace_me_target_3_x_coordinate"].state)
        )
    "y":
      - |-
        $ex (
          parseFloat(hass.states["sensor.replace_me_target_3_x_coordinate"].state) === 0 &&
          parseFloat(hass.states["sensor.replace_me_target_3_y_coordinate"].state) === 0
          ? null
          : parseFloat(hass.states["sensor.replace_me_target_3_y_coordinate"].state)
        )
